"use strict"; const validCoupons = {christmas2020: 15, thanksgivingday: 30, test: 20}, templateCartItem = document.getElementById("template-cart-item").content, templateCartCheckout = document.getElementById("template-cart-checkout").content, templateCartPurchase = document.getElementById("template-cart-purchase").content, cartItems = document.getElementById("cart-items"), cartMainContainer = document.getElementById("cart-container"), fragment = document.createDocumentFragment(), finalPriceSelector = "div.d-flex div.text-truncate", itemTitleSelector = "div.fw-bold.mb-1", itemMainRowSelector = ".row", inputUnitSelector = 'input[name="quantity"]', itemImageSelector = "img", titleContainerSelector = ".mx-2", footerContainerSelector = ".col-12.col-sm-11.col-md-10.py-5.border-bottom.ff-lato-4.mx-auto", cartLabelSelector = "span#cart-label", savedLabelSelector = "span#saved-label", itemSpanSelector = ".h-pointer.ps-1.ps-sm-0.pe-1.pe-sm-2", inputReduceSelector = 'input[name="reducequantity"]', inputIncreaseSelector = 'input[name="increasequantity"]', checkoutCalculationSeletor = "div.text-break.text-truncate-2 span", checkoutItemContainerSelector = "div.col-xs-12.col-md-8.my-2", cartLabelsContainerSelector = ".col-10", goBackBtnSelector = "div.col-12.text-primary.fs-5.mb-3", itemUnitsSelector = "div.text-center span.text-muted", unitsContainerSelector = ".border.p-2", footerButtonsSelector = "button.btn.btn-primary.ff-lato-7"; let itemsToBuy = localStorage.getItem("cart"), checkoutStatus = JSON.parse(localStorage.getItem("checkoutStatus")) || {inCart: !0, chosenPaymentMethod: "paypal", activeCoupon: void 0}, savedForLaterItems = localStorage.getItem("savedForLater"); if (null === savedForLaterItems) renderEmptySavedCart(); else try {footerCalculator(savedForLaterItems = JSON.parse(savedForLaterItems)), renderCartItems(savedForLaterItems)} catch (e) {console.log(e)} if (null === itemsToBuy) cartMainContainer.querySelector(cartLabelSelector).textContent = "(0)"; else try {updateLabel(itemsToBuy = JSON.parse(itemsToBuy))} catch (e) {console.log(e)} function renderEmptySavedCart() {cartItems.innerHTML = ""; const e = document.createElement("h1"); e.classList.add("mt-4", "p-2", "fs-4"), e.textContent = "You have no saved products"; const t = document.createElement("div"); t.classList.add("fs-4", "fw-bold"), t.textContent = "¯\\_(ツ)_/¯"; const a = document.createElement("div"); a.classList.add("mt-4", "fs-5"), a.textContent = "If you have not yet decided to buy a product from your cart, you can leave it here.", fragment.appendChild(e), fragment.appendChild(t), fragment.appendChild(a), cartItems.classList.add("text-center"), cartItems.appendChild(fragment)} function renderCartItems(e) {cartItems.innerHTML = "", Object.values(e).forEach(e => {templateCartItem.querySelector(itemTitleSelector).textContent = e.title, e.quantity > 1 && e.quantity < e.unitsAvailable ? (templateCartItem.querySelector(inputReduceSelector).removeAttribute("disabled"), templateCartItem.querySelector(inputIncreaseSelector).removeAttribute("disabled"), templateCartItem.querySelector(inputUnitSelector).value = e.quantity) : e.quantity >= e.unitsAvailable ? (templateCartItem.querySelector(inputReduceSelector).removeAttribute("disabled"), templateCartItem.querySelector(inputIncreaseSelector).setAttribute("disabled", ""), templateCartItem.querySelector(inputUnitSelector).value = e.unitsAvailable) : (templateCartItem.querySelector(inputReduceSelector).setAttribute("disabled", ""), templateCartItem.querySelector(inputUnitSelector).value = e.quantity), templateCartItem.querySelector(itemUnitsSelector).textContent = `${e.unitsAvailable} available`, templateCartItem.querySelector(itemMainRowSelector).dataset.id = e.id, templateCartItem.querySelector(finalPriceSelector).textContent = (e.quantity * e.finalPrice).toFixed(2); const t = templateCartItem.querySelector(itemImageSelector), a = e.title.toLowerCase().replaceAll(" ", "-"); if (t.setAttribute("src", e.thumnailUrl), t.setAttribute("alt", a), e.hasFreeShipping) {const e = document.createElement("div"); e.classList.add("text-green-5", "mb-1"); const t = document.createElement("i"); t.classList.add("fas", "fa-truck", "me-1"); const a = document.createElement("span"); a.classList.add("fw-bold"), a.textContent = "Free shipping", e.appendChild(t), e.appendChild(a), templateCartItem.querySelector(titleContainerSelector).appendChild(e)} const r = templateCartItem.cloneNode(!0); if (fragment.appendChild(r), e.hasFreeShipping) {const e = templateCartItem.querySelector(titleContainerSelector); e.removeChild(e.lastChild)} }), cartItems.appendChild(fragment), cartItems.lastElementChild.classList.remove("border-bottom"), footerCalculator(e)} function cartManager(e) {switch (e.target.name) {case "reducequantity": case "increasequantity": e.target.parentNode.addEventListener("submit", e => {e.preventDefault()}); const t = savedForLaterItems[e.target.closest(itemMainRowSelector).dataset.id]; "reducequantity" === e.target.name ? t.quantity-- : t.quantity++, savedForLaterItems[e.target.closest(itemMainRowSelector).dataset.id] = {...t}, localStorage.setItem("savedForLater", JSON.stringify(savedForLaterItems)), updateCartContent(e); break; case "quantity": const a = itemsToBuy[e.target.closest(itemMainRowSelector).dataset.id].unitsAvailable; let r; e.target.addEventListener("keyup", () => {r = r >= 0 && r <= a && null !== r ? parseInt(e.target.value, 10) : r > a ? a : 0, savedForLaterItems[e.target.closest(itemMainRowSelector).dataset.id].quantity = r, localStorage.setItem("savedForLater", JSON.stringify(savedForLaterItems)), updateCartContent(e)})}if (e.target.matches(itemSpanSelector) && "Remove" === e.target.textContent && (delete savedForLaterItems[e.target.closest(itemMainRowSelector).dataset.id], localStorage.setItem("savedForLater", JSON.stringify(savedForLaterItems)), 0 === Object.values(savedForLaterItems).length ? resetCart() : renderCartItems(savedForLaterItems)), e.target.matches(itemSpanSelector) && "Buy now" === e.target.textContent) {const t = savedForLaterItems[e.target.closest(itemMainRowSelector).dataset.id]; keepPaymentUpdated(), renderCheckout([t], checkoutStatus.chosenPaymentMethod)} if (e.target.matches(itemSpanSelector) && "Add to cart" === e.target.textContent) {const t = e.target.closest(itemMainRowSelector).dataset.id, a = savedForLaterItems[t]; itemsToBuy[t] = {...a}, localStorage.setItem("cart", JSON.stringify(itemsToBuy)), updateLabel(itemsToBuy)} e.stopPropagation()} function updateCartContent(e) {const t = savedForLaterItems[e.target.closest(itemMainRowSelector).dataset.id]; if (void 0 !== t) {const a = t.quantity, r = t.unitsAvailable, n = t.finalPrice, o = cartItems.querySelector('.row[data-id="' + t.id + '"]'); a > 1 && a < r ? (o.querySelector(inputReduceSelector).removeAttribute("disabled"), o.querySelector(inputIncreaseSelector).removeAttribute("disabled"), e.target.closest(unitsContainerSelector).querySelector(inputUnitSelector).value = a) : a >= r ? (o.querySelector(inputReduceSelector).removeAttribute("disabled"), o.querySelector(inputIncreaseSelector).setAttribute("disabled", ""), e.target.closest(unitsContainerSelector).querySelector(inputUnitSelector).value = r) : (o.querySelector(inputReduceSelector).setAttribute("disabled", ""), e.target.closest(unitsContainerSelector).querySelector(inputUnitSelector).value = a), e.target.closest(itemMainRowSelector).querySelector(finalPriceSelector).textContent = (a * n).toFixed(2)} footerCalculator(savedForLaterItems)} function footerCalculator(e) {const t = Object.values(e).reduce((e, {quantity: t}) => e + t, 0), a = Object.values(e).reduce((e, {quantity: t, finalPrice: a}) => e + t * a, 0), r = Object.values(e).reduce((e, {quantity: t, price: a}) => e + t * a, 0); let n = Object.values(e).reduce((e, {hasFreeShipping: t}) => (t || (e += 50), e), 0); cartMainContainer.querySelector(savedLabelSelector).textContent = `(${t})`; const o = checkoutStatus.chosenPaymentMethod; let [c, l] = [0, 0]; switch (o) {case "paypal": c = 15; break; case "mastercard": c = 10; break; case "visaandmaster": c = 21; break; case "paysafecard": c = 8; break; case "klarna": c = 2}return c = a * c / 100, localStorage.setItem("checkoutStatus", JSON.stringify(checkoutStatus)), checkoutStatus.activeCoupon && (l = a * validCoupons[checkoutStatus.activeCoupon] / 100), {rfinalPrice: a, rshipping: n, rquantity: t, rpaymentMethod: c, rprice: r, rcoupondiscount: l}} function resetCart() {localStorage.removeItem("savedForLater"), cartMainContainer.querySelector(savedLabelSelector).textContent = "(0)", renderEmptySavedCart()} function renderCheckout(e, t) {cartItems.innerHTML = "", footerHasBeenCreated(); const {rfinalPrice: a, rshipping: r, rpaymentMethod: n, rprice: o, rcoupondiscount: c} = footerCalculator(e, t), l = document.createElement("div"); l.classList.add("col-12", "text-primary", "fs-5", "mb-3"); const i = document.createElement("button"); i.classList.add("border-0", "bg-transparent", "ms-4"); const s = document.createElement("span"); s.classList.add("h-pointer"), s.textContent = "Go back"; const d = document.createElement("span"); d.classList.add("p-1", "mx-2", "rounded", "bg-primary", "text-white", "rounded"); const u = document.createElement("i"); u.classList.add("fas", "fa-chevron-left", "fa-fw"), i.addEventListener("click", () => {cartMainContainer.querySelector(cartLabelsContainerSelector).classList.remove("d-none"), cartMainContainer.removeChild(cartMainContainer.querySelector(goBackBtnSelector)), keepPaymentUpdated(), renderCartItems(savedForLaterItems)}), d.appendChild(u), s.appendChild(d), s.insertBefore(d, s.childNodes[0]), i.appendChild(s), l.appendChild(i), cartMainContainer.insertBefore(l, cartMainContainer.childNodes[0]), cartMainContainer.querySelector(cartLabelsContainerSelector).classList.add("d-none"); const m = templateCartCheckout.querySelector(checkoutItemContainerSelector); Object.values(e).forEach(e => {const t = document.createElement("div"); t.classList.add("d-flex", "flex-column", "flex-sm-row", "justify-content-between", "text-center", "my-1"); const a = document.createElement("div"); a.classList.add("text-truncate", "w-checkout-item-title"); const r = document.createElement("span"); r.classList.add("fw-bold"), r.textContent = e.quantity; const n = document.createElement("span"); n.textContent = " - "; const o = document.createElement("span"); o.textContent = e.title; const c = document.createElement("div"); c.classList.add("text-truncate", "w-checkout-item-price", "pe-auto", "pe-sm-2"), c.textContent = `$${(e.quantity * e.finalPrice).toFixed(2)}`, a.appendChild(r), a.appendChild(n), a.appendChild(o), t.appendChild(a), t.appendChild(c), m.appendChild(t)}); const p = Math.ceil(100 * (o - (a - c)) / (o + r + n)); templateCartCheckout.querySelectorAll(checkoutCalculationSeletor)[1].textContent = `$${(o + r + n).toFixed(2)}`, templateCartCheckout.querySelectorAll(checkoutCalculationSeletor)[2].textContent = `-$${(o - (a - c)).toFixed(2)}`, templateCartCheckout.querySelectorAll(checkoutCalculationSeletor)[3].textContent = `(${p}%)`, templateCartCheckout.querySelectorAll(checkoutCalculationSeletor)[4].textContent = `$${(a + r + n - c).toFixed(2)}`; const S = templateCartCheckout.cloneNode(!0); fragment.appendChild(S), cartItems.appendChild(fragment), m.innerHTML = "", document.querySelector(footerButtonsSelector).addEventListener("click", t => {renderPurchaseFinished(e), t.stopPropagation()})} function footerHasBeenCreated() {return null != cartMainContainer.querySelector(footerContainerSelector) && (cartMainContainer.removeChild(cartMainContainer.lastElementChild), !0)} function updateLabel(e) {const t = Object.values(e).reduce((e, {quantity: t}) => e + t, 0); cartMainContainer.querySelector(cartLabelSelector).textContent = `(${t})`} function keepPaymentUpdated() {checkoutStatus = JSON.parse(localStorage.getItem("checkoutStatus")) || {inCart: !0, chosenPaymentMethod: "paypal"}} function renderPurchaseFinished(e) {cartMainContainer.innerHTML = "", cartMainContainer.classList.remove("my-5"), cartMainContainer.classList.add("h-100"), cartItems.classList.add("h-100"); const t = templateCartPurchase.cloneNode(!0); fragment.appendChild(t), cartMainContainer.appendChild(fragment), checkoutStatus.inCart = !0, localStorage.setItem("checkoutStatus", JSON.stringify(checkoutStatus)), Object.values(e).forEach(e => {itemsToBuy[e.id] && delete itemsToBuy[e.id], savedForLaterItems[e.id] && delete savedForLaterItems[e.id]}), localStorage.setItem("cart", JSON.stringify(itemsToBuy)), localStorage.setItem("savedForLater", JSON.stringify(savedForLaterItems)), 0 === Object.values(itemsToBuy).length && localStorage.removeItem("cart"), 0 === Object.values(savedForLaterItems).length && localStorage.removeItem("savedForLater")} cartMainContainer.addEventListener("click", e => {cartManager(e)});
